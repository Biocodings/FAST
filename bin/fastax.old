#!/usr/bin/perl -w
use Getopt::Std;
use Bio::SeqIO;
use Bio::Tools::SeqPattern ();
use vars qw($VERSION $DESC);
$VERSION = 0.3;
$DESC    = "Select sequences based on exact matching of part of a description to NCBI taxonomy IDs or names.\n";
$NAME    = $0;
$NAME    =~ s/^.*\///;

# Command-line options:
$opt_v      = undef; ## negate match
$opt_s      = undef; ## strict negate match
$opt_I      = undef; ## match on identifer, not description
$opt_S      = undef; ## split mode
$opt_F      = undef; ## reg-ex for split, default is \t
$opt_n      = undef; ## no-name mode
$opt_f      = 'fasta';
$opt_h      = undef;

&getopts('vsIS:F:nf:h');

if ($opt_h or @ARGV < 2) {
  print STDERR <<"QQ_HELP_QQ";
 
  $NAME $VERSION
  $DESC
  Copyleft 2010 David H. Ardell
  All wrongs reversed.

  Usage: $NAME [options] NCBI-taxonomy-nodes-file NCBI-taxonomy-names-file [NCBI-taxon-name|NCBI-taxon-ID] fasta-file1 fasta-file2 ... > fasta-file.
         $NAME [options] NCBI-taxonomy-nodes-file NCBI-taxonomy-names-file [NCBI-taxon-name|NCBI-taxon-ID] < fasta-file1 > fasta-file.  
         $NAME [options] -n NCBI-taxonomy-nodes-file NCBI-taxon-ID fasta-file1 fasta-file2 ... > fasta-file.
         $NAME [options] -n NCBI-taxonomy-nodes-file NCBI-taxon-ID < fasta-file1 > fasta-file.


  Options: 
     -h this help 
     -v negate (return all sequences that aren't from taxon)
     -s strict-negate (return all sequences that aren't from taxon, but only if they are from a recognized taxon)
     -I taxa are searched over sequence identifiers (default is over descriptions)
     -S <int>   split-mode (sequence descriptions or identifers are split into fields and field <int> (0-based) is searched for taxonomic identifiers) 
     -F <regex> (in split-mode (-S) split on perl-regex <regex> instead of default separator, which is a tab character \t. Do "man perlre" and "man perlfunc" for split.)
     -n no-name mode (only uses NCBI taxonomic IDs, which are integer strings 
     -f <format> read <format> on input instead of default fasta. <format>
                 may be one of: pir, gcg, genbank, fasta, embl, raw, swiss
                 <format> is case-insensitive; google "Bio::SeqIO" for more info.
  
  Tips:
     Taxon names containing spaces must be surrounded by quotes, like "Aeropyrum pernix K1"

  Examples:

QQ_HELP_QQ
exit 1;
}



unless ($opt_n){
  ($nodesfile,$namesfile,$query) = splice @ARGV,0,3;
  if ($query !~ /[^\d]/) {
    $numquerymode = 1; # expecting tax ID query on named data
    $numquery = $query;

  }
}
else {
  ($nodesfile,$query) = splice @ARGV,0,2;
  $nonamemode = 1; ## numerical ID query and numerical ID data
  die "With only two arguments, the second argument expected to be an NCBI-taxon-ID and must be an integer. Try $NAME -h for help.\n" if ($query =~ /[^\d]/);
  $numquery = $query;

}

if ($namesfile) {
  die "NCBI-taxonomy-names-file $namesfile cannot be found\n" unless (-e $namesfile);
  $line = `grep \"$query\" $namesfile`;
  die "The taxon name $query you entered cannot be found in NCBI-taxonomy-names-file $namesfile\n" unless ($line);
  open (NAMES,$namesfile) or die "Can't open NCBI-taxonomy-names-file $namesfile\n";
  while (<NAMES>) {
    my ($id,$name,@stuff) = split /\t\|\t/,$_;
    $id{$name} = $id;
    if (!$opt_n and $name eq $query) {
      $numquery = $id;
    }
  }
  close NAMES;
  die "The taxon name $query you entered cannot be found in NCBI-taxonomy-names-file $namesfile\n" unless ($opt_n or $numquery);
}

die "NCBI-taxonomy-nodes-file $nodesfile cannot be found\n" unless (-e $nodesfile);
$line = `grep \"$numquery\" $nodesfile`;
die "The taxon ID \"$numquery\" cannot be found in NCBI-taxonomy-nodes-file $nodesfile (or your NCBI taxonomy files do not correspond)\n" unless ($line);
open (NODES,$nodesfile) or die "Can't open NCBI-taxonomy-nodes-file $nodesfile\n";
while (<NODES>) {
  my ($tax,$parent,@stuff) = split /\t\|\t/,$_;
  $parent{$tax} = $parent;
  push @{ $children{$parent} },$tax;
}
close NODES;

## here is where we compute the match criterion
if ($nonamemode){
#if($numquerymode){ deleted by Katie. Wrong variable name
  push @queue,$query;
}
else {
  push @queue,$id{$query};
}
while (@queue){
  my $first = shift @queue;
  $match{$first} = ($opt_v ? 0 : 1);
  push @queue, @{ $children{$first} } if (exists  $children{$first});
}

#$re = qr/$opt_F/ if ($opt_F); #deleted by Katie


$OUT = Bio::SeqIO->newFh('-format' => 'fasta');
unless (@ARGV) {
  $IN = Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $opt_f);
}

while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "Could not find file $file. Skipping.\n";
      next;
    }
    else {
      $IN = Bio::SeqIO->new(-file => $file, '-format' => $opt_f);
    }
  }
  if ($IN) { 
    while (my $seq = $IN->next_seq()) {
      $data = $seq->desc();
      $data = $seq->id() if ($opt_I);
      if (defined $opt_S) {
	  if($opt_F){@datae = split(qr/$opt_F/,$data);}else{@datae = split $data;} #changed to this with more unique variable names, and added $opt_F option herei nstead of above.  
	$data = $datae[$opt_S];
      }
      next unless $data;
      if ($nonamemode) {
	print $OUT $seq if (($opt_s and exists $parent{$data} and not $match{$data}) or ($opt_v and not $match{$data}) or $match{$data});
      }
      else {
	next unless (exists $id{$data});
	print $OUT $seq if (($opt_s and exists $parent{$id{$data}} and not $match{$id{$data}}) or ($opt_v and not $match{$id{$data}}) or $match{$id{$data}});
      }
    }
    undef $IN;
  }
}


