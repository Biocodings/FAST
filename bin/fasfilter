#!/usr/bin/perl -w
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use strict;

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "Filter sequences in a fasta file.\n";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C


GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,

	  ) 
  or pod2usage(2);
		  
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
pod2usage("$0: Requires at least two arguments fasfilter [options] <range> fasta-file1 [fasta-file2...]. Try $NAME -h for help.") if ((-t STDIN) && (@ARGV < 1));
pod2usage("$0: Requires exactly one argument (a range) when reading from STDIN. Try $NAME -h for help.") if (!(-t STDIN) && @ARGV == 0);

&FAST::log($logname, $DATE, $COMMAND, $comment) if ($log); 

my @BANDS = undef;

if ($ARGV[0] =~ /,/) {
    @BANDS = split /,/,$ARGV[0];
  }
else {
  $BANDS[0] = $ARGV[0];
}
shift @ARGV;

my $OUT = FAST::Bio::SeqIO->newFh('-format' => $def_format);
my $IN; 
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $def_format, '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $def_format);
    }
}

while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $def_format, '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $def_format);
    }
  }
  if ($IN) { 
    while (my $seq = $IN->next_seq()) {
      my $seqlen = $seq->length;
      my $pass   = undef;
      foreach my $band (@BANDS) {
        my ($b,$e,$l);
        if ($band =~ /([\d-]+)\.\.([\d-]+)/) {
	  $b = $1;
	  $e = $2;	
	  $pass = 1 if ($b <= $seqlen && $e >= $seqlen);
	}
	elsif ($band =~ /([\d-]+)\.\./) {
	  $l = $1;	
	  $pass = 1 if ($l <= $seqlen);
	}
	else {
	  die "Bad band specification $band.\nTry $0 -h\n";
	}
      }
      print $OUT $seq if ($pass);
    }
    undef $IN;
  }
}



__END__

=head1 NAME

fasfilter - Filter sequences in a fasta file by length

=head1 SYNOPSIS

fasfilter SPECTRUM [fasta-file...]

=head1 DESCRIPTION

 SPECTRUM : BAND | BAND,SPECTRUM
     BAND : { LOWER_BOUND.. | LOWER_BOUND..UPPER_BOUND}
    BOUND : positive integer, sequence based (bioperl) position coordinates

  OUTPUT: 
         * sequences whose length falls within at least one BAND in the SPECTRUM are output
         * BOUND specification is always inclusive of the bound.

Options specific to name:

Options general to FAST:
  -h, --help                  	 print a brief help message
  --man             	           print full documentation
  --version                         print version
  -l, --log                         create/append to logfile	
  -L, --logname=<string>            use logfile name <string>
  -C, --comment=<string>            save comment <string> to log
  --format=<format>                 use alternative format for input  
  --moltype=<[dna|rna|protein]>      specify input sequence type

=head1 INPUT AND OUTPUT

fasfilter is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT. The FAST utility B<fasconvert> can
reformat other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Output all sequences of length 400 or less

=over 8

fasfilter 1..400 < in.fas > out.fas

=back

Output all sequences of length between 400 and 800 inclusively

=over 8

fasfilter 400..800 < in.fas > out.fas

=back

Output all sequences of length 800 or more

=over 8

fasfilter 800.. < in.fas > out.fas

=back

Output all sequences of length 400 or less or 800 or more

=over 8

fasfilter 1..400,800.. < in.fas > out.fas

=back


=back

=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Ardell (2013). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
