#!/usr/bin/perl -w
use Clone qw(clone);
use List::Util qw(min max);
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use File::Basename;
use strict;

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "concatenate sequence records";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";
my $def_field_join         = $FAST::DEF_JOIN_STRING; # " "
my $def_other_join         = '';

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $descdelim            = $def_field_join;
my $serial               = undef; # -s
my $seqdelims            = undef; # -j
my $repeat               = undef;
my $i;

GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,
	   'd|delimiters=s'              => \$descdelim,
	   'serial|s'                    => \$serial,
	   'j|join=s'                    => \$seqdelims,
     'fastq|q'                     => sub {$format = 'fastq';},
     'repeat|r'                    => \$repeat,
	  ) 
  or exit(1);

pod2usage(-verbose => 1) if $help;
pod2usage(-verbose => 2) if $man;

my $fromSTDIN = ((-t STDIN) ? false : true);

pod2usage("$NAME: expects at least one input filename or glob. Try \"perldoc $NAME\"") if (!$fromSTDIN and !(@ARGV));
pod2usage("$NAME: -q and -j are incompatible options. Try \"perldoc $NAME\"") if ($format eq 'fastq' and $seqdelims);
&FAST::log($logname, $DATE, $COMMAND, $comment, $fromSTDIN) if ($log);

my @delims = undef;
my @descdelims = undef;

if ($seqdelims) {
  @delims = split //, $seqdelims;
} else {
  @delims = ();
}

if ($descdelim) {
  $descdelim =~ s/\\t/\t/g;
  @descdelims = split //, $descdelim;
} else {
  @descdelims = ();
}

my $OUT = FAST::Bio::SeqIO->newFh(-fh => *STDOUT{IO}, '-format' => $format);

my $maxdelim = @delims;
my $maxdescdelim = @descdelims;

my @seqs = ();
my $outputseq = undef;
my @outputqual = undef;

unless (@ARGV and !$fromSTDIN) {
    push @ARGV , q/-/;
}

while (@ARGV) {
  my $file = shift (@ARGV);

  if ($file eq '-') {
    unless ($fromSTDIN) {
      warn "$NAME: Could not find any input on STDIN. Skipping.\n";
    } elsif ($moltype) {
      push @seqs, FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $format, '-alphabet' => $moltype);
    } else {
      push @seqs, FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $format);
    }       
  } elsif (!(-e $file)) {
    warn "$NAME: Could not find file $file. Skipping.\n";
  }
  elsif ($moltype) {
    push @seqs, FAST::Bio::SeqIO->new(-file => $file, '-format' => $format, '-alphabet' => $moltype);
  }
  else {
    push @seqs, FAST::Bio::SeqIO->new(-file => $file, '-format' => $format);
  }
}

my @seq_track = undef;
my $undef_tracker;
Paste: {
do {
  undef $outputseq;
  undef @outputqual;
  my $delimpos = 0;
  my $delim = undef;
  my $descdelimpos = 0;
  $descdelim = undef;
  $i = 0;
  $undef_tracker = 0;
  
  foreach my $seqio (@seqs) {
    my $seq = undef;
    unless ($seqio) {
      next;
    }

    if ($repeat){
      $seq = $seqio->next_seq();
      if (!$seq){
        $seq = clone($seq_track[$i]);
        $undef_tracker++;
        last Paste if ($undef_tracker == scalar(@seqs));
      }
      else{
        $seq_track[$i] = clone($seq);
      }
    }
    else {$seq = $seqio->next_seq();}
    
    do {
      unless ($seq) {
        next;
      }

      unless($outputseq) {
	$outputseq = $seq;
      } 
      else {
        $delim = $delims[$delimpos];
        $delimpos += 1;
	
        if ($delimpos >= $maxdelim) {
          $delimpos = 0;
        }
	
        $descdelim = $descdelims[$descdelimpos];
        $descdelimpos += 1;
	
        if ($descdelimpos >= $maxdescdelim) {
          $descdelimpos = 0;
        }
	
	if ($descdelim) {
          $outputseq->desc(join $descdelim, $outputseq->desc(), $seq->desc());
	}
	
        $outputseq->seq(join $delim ? $delim : $def_other_join, $outputseq->seq(), $seq->seq());
        if ($format eq 'fastq'){
          @outputqual = split ' ', $outputseq->qual_text();
          push @outputqual, split ' ', $seq->qual_text();
          $outputseq->qual(\@outputqual);
        }
      }
    } while ($serial and $seq = $seqio->next_seq());

    if ($serial) {
      last;
    }
   $i++;

  }
  
  if ($outputseq) {
    print $OUT $outputseq;
  }

} while ($outputseq);
}

__END__

=head1 NAME

B<faspaste> - concatenate sequences of files

=head1 SYNOPSIS

B<faspaste> [OPTION]... [MULTIFASTA-FILE]...

=head1 DESCRIPTION

B<faspaste> takes sequence or alignment data as input, and concatenates the sequences of the given input files. 
By default if the last sequence is reached on an input file while other input files contain sequences, the remaining sequences
will be concatenation of the remaining input files.


Options specific to B<faspaste>:
  B<-d>, <--delimiter>=<string>           a list of dilimiters to use when joining
                                     the descriptions together. (Default: ' ')
  B<-j>, B<--join>=<string>         a list of delimiters to use when joining 
                                     the sequences together (Default: '')
  B<-s>, B<--serial>                paste all sequences in a file together,
                                     instead of file by file.
  B<-r>, B<--repeat>                if a source contains less sequences than the longest
                                    source the last entry of the shorter source is repeated 

Options general to FAST:
  B<-h>, B<--help>                  	 print a brief help message
  B<--man>             	           print full documentation
  B<--version>                         print version
  B<-l>, B<--log>                         create/append to logfile	
  B<-L>, B<--logname>=<string>            use logfile name <string>
  B<-C>, B<--comment>=<string>            save comment <string> to log
  B<--format>=<format>                 use alternative format for input  
  B<--moltype>=<[dna|rna|protein]>     specify input sequence type
  B<-q>, B<--fastq>                       use fastq format as input and output

=head1 INPUT AND OUTPUT

B<faspaste> is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files and or on
STDIN. A file passed through STDIN must have a '-' arguement to be used.
Output occurs to STDOUT. The FAST utility B<fasconvert> can reformat 
other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-d>,
      B<--delimiter=[string]>

A list of delimiters to used when joining the descriptions. If unspecified the 
descriptions will joined using a space as the delimiter. If the list is shorter than number of joins the
delimiter wrap around and start over using the first character in the list. The
characters '\t' will be replaced by a tab if used.

=item B<-s>,
      B<--serial>

Append sequences together by file, so that each file produces one sequence.

=item B<-j=[string]>,
      B<--join=[string]>,

A list of delimiters to used when joining the sequences. If unspecified the 
sequences will be joined together with no delimiter. If the list is shorter 
than number of joins the delimiter wrap around and start over using the first 
character in the list. The character must be an IUPAC character for the sequence 
type or '*'.

=item B<-r>,
      B<--repeat>

If a source contains less sequences than the longest source the last entry of the 
shorter source is repeated.

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-q>
      B<--fastq>

Use fastq format as input and output.

=back

=head1 EXAMPLES

Join sequences from two files together:

=over 8

B<faspaste> data.fas data2.fas

=back

Join descriptions with a space and sequences with no delimiter from two files:
    
=over 8

B<faspaste> -d data.fas data2.fas

=back

Join descriptions with a delimiter and sequences with no delimiter from two files:
    
=over 8

B<faspaste> --delimiter '\t' data.fas data2.fas

=back

Join sequences with a delimiter from two files: 

=over 8

B<faspaste> -j 'NNNN' data.fas data2.fas
    
=back

Join all the sequences in a file into one sequence: 

=over 8

B<faspaste> -s data.fas
    
=back

=head1 SEE ALSO

=over 8

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Lawrence et al. (2014). FAST: FAST Analysis of
Sequences Toolbox.> and Bioperl I<Stajich et al.>. 

=cut
