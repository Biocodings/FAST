#!/usr/bin/perl -w
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use strict;

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "Select sequences based on exact matching of part of a description to NCBI taxonomy IDs or names.\n";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $negate               = undef;        # -v
my $strict_negate        = undef;        # -s
my $identifier           = undef;        # -i
my $field                = undef;        # -f
my $split_on_regex       = undef;        # -S
my $noname               = undef;        # -n

GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,
	   'negate|v'                    => \$negate,
	   'strict-negate|s'             => \$strict_negate,
	   'identifier|I'                => \$identifier,
	   'field|f=i'             => sub{  my (undef,$val) = @_; 
						  die "$NAME: --field or -f option expects non-zero integer argument\n" 
						    unless $val != 0; 
						  $field = $val;
						},
	   'split-on-regex|S=s'          => \$split_on_regex,
	   'no-names|n'                  => \$noname,
	   
	  ) 
  or pod2usage(2);
		  
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
pod2usage("$0: Requires at least two arguments NCBI-taxonomy-nodes-file NCBI-taxonomy-names-file [NCBI-taxon-name|NCBI-taxon-ID]. Try $NAME -h for help.") if ((-t STDIN) && (@ARGV < 2));
pod2usage("$0: Requires at least three arguments when taking input from STDIN. Try $NAME -h for help.") if (@ARGV < 3);

&FAST::log($logname, $DATE, $COMMAND, $comment) if ($log);

my $nonamemode;
my $numquery;
my $query; 
my $nodesfile;
my $namesfile;
my $line;
my %id;
my %parent;
my %children;
my %match;

unless ($noname){
  ($nodesfile,$namesfile,$query) = splice @ARGV,0,3;
  if ($query !~ /[^\d]/) {
    #$numquerymode = 1; # expecting tax ID query on named data
    $numquery = $query;

  }
}
else {
  ($nodesfile,$query) = splice @ARGV,0,2;
  $nonamemode = 1; ## numerical ID query and numerical ID data
  die "With only two arguments, the second argument expected to be an NCBI-taxon-ID and must be an integer. Try $NAME -h for help.\n" if ($query =~ /[^\d]/);
  $numquery = $query;

}

if ($namesfile) {
  die "NCBI-taxonomy-names-file $namesfile cannot be found\n" unless (-e $namesfile);
  $line = `grep \"$query\" $namesfile`;
  die "The taxon name $query you entered cannot be found in NCBI-taxonomy-names-file $namesfile\n" unless ($line);
  open (NAMES,$namesfile) or die "Can't open NCBI-taxonomy-names-file $namesfile\n";
  while (<NAMES>) {
    my ($id,$name,@stuff) = split /\t\|\t/,$_;
    $id{$name} = $id;
    if (!$noname and $name eq $query) {
      $numquery = $id;
    }
  }
  close NAMES;
  die "The taxon name $query you entered cannot be found in NCBI-taxonomy-names-file $namesfile\n" unless ($noname or $numquery);
}

die "NCBI-taxonomy-nodes-file $nodesfile cannot be found\n" unless (-e $nodesfile);
$line = `grep \"$numquery\" $nodesfile`;
die "The taxon ID \"$numquery\" cannot be found in NCBI-taxonomy-nodes-file $nodesfile (or your NCBI taxonomy files do not correspond)\n" unless ($line);
open (NODES,$nodesfile) or die "Can't open NCBI-taxonomy-nodes-file $nodesfile\n";
while (<NODES>) {
  my ($tax,$parent,@stuff) = split /\t\|\t/,$_;
  $parent{$tax} = $parent;
  push @{ $children{$parent} },$tax;
}
close NODES;

my @queue;
## here is where we compute the match criterion
if ($nonamemode){
#if($numquerymode){ deleted by Katie. Wrong variable name
  push @queue,$query;
}
else {
  push @queue,$id{$query};
}
while (@queue){
  my $first = shift @queue;
  $match{$first} = ($negate ? 0 : 1);
  push @queue, @{ $children{$first} } if (exists  $children{$first});
}

my $index;
if (defined $field and $field > 0) {
  $index = $field - 1;
}
else { # $field < 0
  $index = $field;
}

my $OUT = FAST::Bio::SeqIO->newFh('-format' => $def_format);
my $IN;
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $def_format, '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $def_format);
    }
}

while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $def_format, '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $def_format);
    }
  }
  if ($IN) { 
    while (my $seq = $IN->next_seq()) {
      my $data = $seq->desc();
      $data = $seq->id() if ($identifier);
      if ($field) {
        my @datae = ();
        if($split_on_regex){
	  @datae = split(qr/$split_on_regex/,$data);}
	else{
	  @datae = split $data;
	} #changed to this with more unique variable names, and added $regex_split option herei nstead of above.  	  
	$data = $datae[$field];
      }
      next unless $data;
      if ($nonamemode) {
	print $OUT $seq if (($strict_negate and exists $parent{$data} and not $match{$data}) or ($negate and not $match{$data}) or $match{$data});
      }
      else {
	next unless (exists $id{$data});
        print $OUT $seq if (($strict_negate and exists $parent{$id{$data}} and not $match{$id{$data}}) or ($negate and not $match{$id{$data}}) or $match{$id{$data}});
      }      
    }
    undef $IN;
  }
}



__END__

=head1 NAME

B<fastax> -- select sequence records by NCBI taxonomic names or IDs

=head1 SYNOPSIS

B<fastax> [OPTION]... [NODES-FILE] [NAMES-FILE] [TAXON] [MULTIFASTA-FILE]...

=head1 DESCRIPTION

B<fastax> takes sequence or alignment data on input, and if directed to 
valid NCBI Taxonomic ID labels in the sequence records, can output

sequence records accordin . By default, the
regex is tested for matching against sequence desc. B<fasgrep>
takes one argument, a perl regular expression. Regex arguments may
require quoting to protect special characters from interpretation by
the shell.

Options specific to fastax:
  -v, --negate               return all sequences that are not from the taxon
  -s, --strict-negate        return all sequences that are not from the taxon, but only
                               if they are from a recognized taxon
  -i, --identifier             taxa are searched over sequence identifiers (default is over descriptions)
  -f, --field=<int>          split descriptions or identifers into fields  and field <int> (1-based) 
  -F, --regex-split=<string> in split-mode (-S) split on perl-regex <regex> instead of default separator,
                               which is a tab character \t. Do "man perlre" and "man perlfunc" for split.
  -n, --no-name-mode         no-name mode (only use NCBI taxonomic IDS, which are integer strings)

Options general to FAST:
  -h, --help                  	 print a brief help message
  --man             	           print full documentation
  --version                         print version
  -l, --log                         create/append to logfile	
  -L, --logname=<string>            use logfile name <string>
  -C, --comment=<string>            save comment <string> to log
  --format=<format>                 use alternative format for input  
  --moltype=<[dna|rna|protein]>      specify input sequence type
  
=head1 INPUT AND OUTPUT

fastax is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT. The FAST utility B<fasconvert> can
reformat other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-v>,
      B<--negate>

return all sequences that are not from the taxon

=item B<-s>,
      B<--strict-negate>

return all sequences that are not from the taxon, but only
if they are from a recognized taxon

=item B<-i>,
      B<--identifier>

taxa are searched over sequence identifiers (default is over descriptions)

=item B<-f [int]>,
      B<--field=[int]>

sequence descriptions or identifers are split into fields
and field <int> (1-based) is searched for taxonomic identifiers

=item B<-F [string]>,
      B<--regex-split=[string]>
In split-mode (-S) split on perl-regex <regex> instead of default separator,
which is a tab character \t. Do "man perlre" and "man perlfunc" for split.

=item B<-n>,
      B<--no-name-mode>
 
no-name mode (only use NCBI taxonomic IDS, which are integer strings)

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Example 1 - does something

=over 8

fastax [options] NCBI-taxonomy-nodes-file NCBI-taxonomy-names-file [NCBI-taxon-name|NCBI-taxon-ID] < fasta-file1 > fasta-file.

=back


=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Ardell (2013). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
