#!/usr/bin/perl -w
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use strict;

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "Sort and identify sequences based on NCBI taxonomy.\n";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $noname               = undef; #-n
my $split_on_regex       = undef; #-S
my $field                = undef; #-f
my $identifier            = undef; #-i
my $index                = undef; #--index
my $marker               = '#'; #-m
my $fastq                = undef;

GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,
	   'field|f=i'                   => sub{  my (undef,$val) = @_; 
						  die "$NAME: --field or -f option expects non-zero integer argument\n" 
						    unless $val != 0; 
						  $field = $val;
						},
	   'split-on-regex|S=s'          => \$split_on_regex,
	   'no-names|n'                  => \$noname,
	   'identifier|i'                => \$identifier,
	   'index'                       => \$index,
	   'marker|M=s'                  => \$marker,
           'q|fastq'                     => sub {$format = 'fastq'},
	  ) 
  or exit(1);

pod2usage(-verbose => 1) if $help;
pod2usage(-verbose => 2) if $man;
my $fromSTDIN = ((-t STDIN) ? false : true);

pod2usage("$NAME: expects path to \"nodes.dmp\", path to \"names.dmp\" and at least one input filename or glob.\n") if (!($fromSTDIN) && (@ARGV < 3));
pod2usage("$NAME: expects path to \"nodes.dmp\" and path to \"names.dmp\" when input is on STDIN.\n") if ($fromSTDIN && @ARGV != 2);

&FAST::log($logname, $DATE, $COMMAND, $comment, $fromSTDIN) if ($log); 

my $nodesfile;
my $namesfile;
my $nonamemode;
my %id;
my %name;
my %parent;
my %children;
my %address;
my %childaddress;
my %childrenseen;
my %seq;

unless ($noname){
  ($nodesfile,$namesfile) = splice @ARGV,0,2;
}
else {
  ($nodesfile) = shift @ARGV;
  $nonamemode = 1; ## numerical ID query and numerical ID data
}

if ($namesfile) {
  die "NCBI-taxonomy-names-file $namesfile cannot be found\n" unless (-e $namesfile);
  open (NAMES,$namesfile) or die "Can't open NCBI-taxonomy-names-file $namesfile\n";
  while (<NAMES>) {
    my ($id,$name,@stuff) = split /\t\|\t/,$_;
    $id{$name} = $id;
    if ($index) {
      unless (exists $name{$id}) { ## take the first name from names.dmp
	$name{$id} = $name;
      }
    }
  }
  close NAMES;
}

die "NCBI-taxonomy-nodes-file $nodesfile cannot be found\n" unless (-e $nodesfile);
open (NODES,$nodesfile) or die "Can't open NCBI-taxonomy-nodes-file $nodesfile\n";
while (<NODES>) {
  my ($tax,$parent,@stuff) = split /\t\|\t/,$_;
  $parent{$tax} = $parent;
  unless ($parent == $tax) { ## both equal to one at top of nodes.dmp
    $children{$parent}{$tax} = 1;
  }
}
close NODES;

$address{ 1 } = "00";
if ($index) {
  print $marker,join " ",$address{ 1 },$name{1},"\n";
}
&address_DFS(1);
sub address_DFS(){
  my $tax = shift;
  $childaddress{$tax} = 0;
  foreach my $child (sort {$a <=> $b} keys %{ $children{$tax} } ) { 
    $address{ $child } = join "",(join ".",$address{ $tax },(sprintf "%02s",$childaddress{ $tax }++));
    if ($index) {
      print $marker,join " ",$address{ $child },$name{$child},"\n";
    }
    if (exists $children{$child}) {  
      &address_DFS($child);
    }
  }
}

die if $index;

my $field_index;
if (defined $field and $field > 0) {
  $field_index = $field - 1;
}
else { # $field < 0
  $field_index = $field;
}

my $re;
if ($split_on_regex){
  $re = qr/$split_on_regex/;
}


my $OUT = FAST::Bio::SeqIO->newFh('-format' => $format);
my $IN;
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $format, '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $format);
    }
}

while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $format, '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $format);
    }
  }
  if ($IN) { 
    while (my $seq = $IN->next_seq()) {
      my $id;
      my $data = $seq->desc();
      $data = $seq->id() if ($identifier);
      if ($field) {
	my @data = ();
	if ($split_on_regex) {
	  @data = split $re,$data;
	}
	else {
	  @data = split ' ',$data;
	}
	$data = $data[$field];
      }
      next unless $data;
  
      if ($nonamemode) {
	push @{ $seq{$data} },$seq;
	$id = $data;
      }
      else {
	next unless (exists $id{$data});
	push @{ $seq{$id{$data}} },$seq;
	$id = $id{$data};
      }
      while($id != 1) {
	my $parent = $parent{$id};
	$childrenseen{$parent}{$id} = 1; 
	$id = $parent;
      }
    }
    undef $IN;
  }
}

&DFS_seq(1);

sub DFS_seq {
  my $node = shift;
  if (exists $seq{$node} ) {
    foreach my $seq (@{ $seq{$node} }){
      $seq->desc(join " ",$seq->desc,(join "",$marker,$address{$node}));
      print $OUT $seq;      
    }
  }
  if (exists $childrenseen{$node} ) {
    foreach my $child (map { $_->[0] } sort address_sort map {[$_,$address{$_}]} keys %{ $childrenseen{$node} }) {
      &DFS_seq($child);
    }
  }
}

sub address_sort {
  return 0 if ($a->[1] eq $b->[1]);
  my @a = split /\./, $a->[1];
  my @b = split /\./, $b->[1];
  while (@a) {
    my $aa = shift @a or return -1;
    my $bb = shift @b or return  1;
    return -1 if ($aa < $bb);
    return  1 if ($aa > $bb);
  }
  warn "${NAME}::address_sort: invalid condition. Please contact author.\n";
}

__END__

=head1 NAME

B<fastaxsort> - sort and identify sequences based on NCBI taxonomy

=head1 SYNOPSIS

B<fastaxsort>  [OPTION]... [NODES-FILE] [NAMES-FILE] [MULTIFASTA-FILE]...

=head1 DESCRIPTION

B<fastaxsort> takes multifasta format sequence or alignment data as input,

Options specific to B<fastaxsort>:
  B<-n>, B<--noname>
  B<-S>, B<--split-on-regex>=<regex>    split description for field matching using regex 
  B<-f>, B<--field>=<int>               sort on field in description
  B<-i>, B<--identifier>                taxa are sorted over sequence identifiers (default is over descriptions)
  B<--index>
  B<-M>, B<--marker>

Options general to FAST:
  B<-h>, B<--help>                        print a brief help message
    B<--man>             	            print full documentation
  B<--version>                         print version
  B<-l>, B<--log>                         create/append to logfile	
  B<-L>, B<--logname=<string>>            use logfile name <string>
  B<-C>, B<--comment=<string>>            save comment <string> to log
  B<--format=<format>>                 use alternative format for input  
  B<--moltype=<[dna|rna|protein]>>      specify input sequence type
  B<-q>, B<--fastq>                        use fastq format as input and output

=head1 INPUT AND OUTPUT

B<fastaxsort> is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT. The FAST utility B<fasconvert> can
reformat other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-n>
      B<--noname>

Description

=item B<-S>
      B<--split-on-regex>

Use regex <regex> to split descriptions for the -f option instead
of the perl default (which splits on one or more whitespace
characters). Special characters must be quoted to protect them from
the shell.

Description

=item B<-f>
      B<--field>

Sort sequence records by values at a specific field in sequence descriptions.
With this option, the description is split into fields using strings of white
space as field delimiters (the default Perl behavior for splitting
lines of data into fields).

This option takes a mandatory positive integer option argument giving
the index for which field the regex should query. One-based indexing
is used, so the first field after the sequence identifier has index
1. As standard in Perl, negative indices count backwards from the last
field in the description; field "-1" is the last field, "-2" is the
second-to-last etc. Sequence records for which the specified field
does not exist will sort on a null key.

Description

=item B<-i>
      B<--indentifier>

taxa are sorted over sequence identifiers (default is over descriptions)

Description

=item B<--index>

Description

=item B<-M>
      B<--marker>

Description

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=item B<-q>
      B<--fastq>

Use fastq format as input and output.

=back

=head1 EXAMPLES

Print all sequences with "-DNA" in the ID:

=over 8

cat data.fas | B<fasgrep> "-DNA" > data.dna.fas

=back


=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Lawrence et al. (2014). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
