#!/usr/bin/perl -w
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use strict;
#no warnings 'once';

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "character-based transformations on sequences";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $sequence             = undef; # -s
my $description          = undef; # -d
my $delete               = undef; # -D
my $squash               = undef; # -S
my $no_replace           = undef; # -n
my $complement           = undef; # -c
my $strict               = undef; # --strict implies "-sc $strict_symbols{$moltype} ($ambig_char || $ambig{$moltype})"
my $iupac                = undef; # --iupac  implies "-sc $iupac_symbols{$moltype} ($ambig_char || $ambig{$moltype})"
my $ambig_char           = undef; # -a

my %strict_symbols       = ();
my %iupac_symbols        = ();
my %ambig                = ();

## TO GO INTO DICTIONARY
$strict_symbols{'dna'}     = 'ACTGactg\-';
$iupac_symbols{'dna'}      = 'ACTGactgMRWSYKVHDBXNmrwsykvhdbxn\-';
$strict_symbols{'rna'}     = 'ACUGacug\-';
$iupac_symbols{'rna'}      = 'ACUGacugMRWSYKVHDBXNmrwsykvhdbxn\-';
$strict_symbols{'protein'} = 'ACDEFGHIKLMNPQRSTVWYacdefghiklmnpqrstvwy\-';
$iupac_symbols{'protein'}  = 'ACDEFGHIKLMNPQRSTVWYacdefghiklmnpqrstvwyBZX\.bzx\*\-';

$ambig{'dna'}              = 'N';
$ambig{'rna'}              = 'N';
$ambig{'protein'}          = 'X';

GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"\n" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,
	   'delete|D'                    => \$delete,
	   'squash|S'                    => \$squash,
	   'complement|c'                => \$complement,
	   'strict'                      => \$strict,
	   'iupac'                       => \$iupac,
	   'sequence|s'                  => \$sequence,
	   'description|d'               => \$description,
	   'ambig|a'                     => sub{  my (undef,$val) = @_; 
						  die "$NAME: --ambig or -a option arg must be length 1\n" 
						    unless (length $val == 1); 
						  $ambig_char = $val;
						},
           'no-replace|n'                => \$no_replace,
	  ) 
  or pod2usage(2);

my $iupac_or_strict  = ($iupac  || $strict);
my $delete_or_squash = ($delete || $squash);
		  
pod2usage(-verbose => 1) if $help;
pod2usage(-verbose => 2) if $man;
my $fromSTDIN = ((-t STDIN) ? false : true);

pod2usage("$NAME: with --strict or --iupac, no other options except --ambig are allowed.\n")      if ( ($iupac_or_strict) &&  ($delete_or_squash || $complement || $description || $sequence || $no_replace));  
pod2usage("$NAME: expects exactly two arguments unless --no-replace/-n if input on STDIN.\n")        if (!(-t STDIN) && !($iupac_or_strict) && !($no_replace) && @ARGV != 2);
pod2usage("$NAME: expects at least three arguments unless --no-replace/-n if input from file\n")     if ( (-t STDIN) && !($iupac_or_strict) && !($no_replace) && @ARGV  < 3);
pod2usage("$NAME: expects exactly one arguments with --no-replace/-n if input on STDIN.\n")          if (!(-t STDIN) && !($iupac_or_strict) &&  ($no_replace) && @ARGV != 1);
pod2usage("$NAME: expects at least two arguments with --no-replace/-n if input from file\n")         if ( (-t STDIN) && !($iupac_or_strict) &&  ($no_replace) && @ARGV  < 2);
pod2usage("$NAME: with --strict or --iupac expects zero arguments if input on STDIN.\n")          if (!(-t STDIN) &&  ($iupac_or_strict) && @ARGV  > 0);
pod2usage("$NAME: with --strict or --iupac expects at least one argument if input from file.\n")  if ( (-t STDIN) &&  ($iupac_or_strict) && @ARGV == 0);

&FAST::log($logname, $DATE, $COMMAND, $comment, $fromSTDIN) if ($log); 

my ($selector,$type);
if ($iupac_or_strict) {
  $selector = "seq";
  $type = "sequence";
  $complement = 1;
}
elsif ($sequence) {
  $selector = "seq";
  $type = "sequence";
}
elsif ($description) { 
  $selector = "desc";
  $type = "description";
}
else {
  $selector = "id";
  $type = "identifier";
}

my ($search,$replace); 
unless ($iupac_or_strict) {
  $search               = shift @ARGV;
  unless ($no_replace) {
    $replace              = shift @ARGV;
  }
  else {
    $replace              = "";
  }
      
}


my $OUT = FAST::Bio::SeqIO->newFh('-format' => $def_format);
my $IN;
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $def_format, '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $def_format);
    }
}

while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $def_format, '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $def_format);
    }
  }
  if ($IN) { 
    while (my $seq = $IN->next_seq()) {
      my $data = $seq->$selector();
      $moltype ||= $seq->alphabet;
      if ($iupac) {
	$search = $iupac_symbols{$moltype};
	$replace = $ambig_char || $ambig{$moltype};
      }
      if ($strict) {
	$search = $strict_symbols{$moltype};
	$replace = $ambig_char || $ambig{$moltype};
      }
      my $count;
      my @options = ();
      push @options, 'c' if ($complement);
      push @options, 'd' if ($delete);
      push @options, 's' if ($squash);
      my $options = join '',@options;
      eval "\$count = \$data =~ tr/$search/$replace/$options";
      die "$NAME: $@\n" if $@;
      $seq->$selector($data);
      # if ($append_info) {
      # 	$seq->desc(join ' ',$seq->desc(),"B<fastr>: $search|$replace|$options:$count");
      # }
      print $OUT $seq;
    }
    undef $IN;
  }
}



__END__

=head1 NAME

B<fastr> - character-based transformations on sequence records

=head1 SYNOPSIS

B<fastr>     [OPTION]... [SEARCHLIST] [REPLACELIST] [MULTIFASTA-FILE...]

B<fastr -n>  [OPTION]... [SEARCHLIST]               [MULTIFASTA-FILE...]

B<fastr --strict> [B<--ambig>=<char>]                  [MULTIFASTA-FILE...]

B<fastr --iupac>  [B<--ambig>=<char>]                  [MULTIFASTA-FILE...]

=head1 DESCRIPTION

B<fastr> takes multifasta format sequence or alignment data as input,
and faciliates character transliterations on identifiers (by default),
sequences or descriptions using the Perl B<tr///> character
transliteration operator. This faciliates character remapping, case
changes, character deletions, degapping, squashing of repeated
characters, and more. Special modes B<--strict> and B<--iupac>
facilitate enforcement of sequence alphabets, and remapping illegal
characters to 'N' or 'X' or a user-defined character.

Options specific to B<fastr>:
  B<-s>, B<--sequences>              transliterate sequences
  B<-d>, --description             transliterate descriptions  
  B<-D>, --delete                  delete found characters not replaced
  B<-S>, --squash                  squash duplicate replaced characters 
  B<-n>, --no-replace              squash or delete all characters in searchlist 
  B<-c>, --complement              complement searchlist as a character set
  B<--strict>                      map ambiguous/illegal seq characters besides '-' to 'X'/'N'
  B<--iupac>                       map illegal sequence characters besides '-' to 'X'/'N'
  -a, --ambig=<char>               use <char> to replace illegal sequence characters   

Options general to FAST:
  -h, --help                  	 print a brief help message
  --man             	           print full documentation
  --version                         print version
  -l, --log                         create/append to logfile	
  -L, --logname=<string>            use logfile name <string>
  -C, --comment=<string>            save comment <string> to log
  --format=<format>                 use alternative format for input  
  --moltype=<[dna|rna|protein]>      specify input sequence type

=head1 SEARCHLIST AND REPLACELIST

These arguments are strings of characters, or character ranges with
hyphens (like "A-Z" "0-9"), separated by the empty string. Characters
are remapped in corresponding order. If SEARCHLIST is longer than
REPLACELIST, the last character of REPLACELIST is repeated unless in
"delete-mode," in which case unmatched characters are deleted. In
"squash-mode" transliteration happens before squashing. With the
"no-replace" option, only SEARCHLIST is provided, no transliteration
occurs, and SEARCHLIST characters are directly squashed and
deleted. For more information see documentation for B<tr///> in the
B<perlop> manpage.

=head1 INPUT AND OUTPUT

B<fastr> is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT. The FAST utility B<fasconvert> can
reformat other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-s>
      B<--sequence>

Transliterate sequences (identifiers by default).

=item B<-d>
      B<--description>

Transliterate descriptions.

=item B<-D>
      B<--delete>

Delete found but unreplaced characters. 

=item B<-S>
      B<--squash>

Squash duplicate replaced characters.

=item B<-c>
      B<--complement>

Character complement SEARCHLIST.

=item B<-n>
      B<--no-replace>

Delete or squash characters in SEARCHLIST. 

=item B<--strict>

Transliterate illegal sequence characters to "N" (DNA or RNA) or
"X" (protein). For DNA, equivalent to:

B<fastr> -sc ACTGactg\- N>

=item B<--iupac>

Transliterate illegal sequence characters (including IUPAC
ambiguities) to "N" (DNA or RNA) or "X" (protein). For DNA, equivalent
to:

B<fastr> -sc ACTGactgMRWSYKVHDBXNmrwsykvhdbxn\- N>

=item B<-a>
      B<--ambig char>

Use <char> to replace illegal characters instead of "N" or "X" with
B<--strict> or B<--iupac>

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Print all sequences with "-DNA" in the ID:

=over 8

cat data.fas | fasgrep "-DNA" > data.dna.fas

=back


=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Ardell (2013). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
