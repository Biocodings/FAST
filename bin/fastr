#!/usr/bin/perl -w
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use strict;
no warnings 'once';

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $delete               = undef;
my $squeeze              = undef;
my $complement           = undef;
my $strict               = undef;
my $iupac                = undef;
my $seq_match            = undef;
my $desc_match           = undef;
my $append_info          = undef;


my $component            = 'id'; #default
my $search = undef;
my $replace = ''; #default value for replace
my %strict_symbols = ();
my %iupac_symbols = ();
my %ambig = ();

## TO GO INTO DICTIONARY
$strict_symbols{'dna'}     = '[ACTGactg\-]';
$iupac_symbols{'dna'}      = '[ACTGactgMRWSYKVHDBXNmrwsykvhdbxn\-]';
$strict_symbols{'rna'}     = '[ACUGacug\-]';
$iupac_symbols{'rna'}      = '[ACUGacugMRWSYKVHDBXNmrwsykvhdbxn\-]';
$strict_symbols{'protein'} = '[ACDEFGHIKLMNPQRSTVWYacdefghiklmnpqrstvwy\-]';
$iupac_symbols{'protein'}  = '[ACDEFGHIKLMNPQRSTVWYacdefghiklmnpqrstvwyBZX\.bzx\*\-]';

$ambig{'dna'} = 'N';
$ambig{'rna'} = 'N';
$ambig{'protein'} = 'X';



GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,
     'D=s'                         => \$delete,
     'S=s'                         => \$squeeze,
     'complement|c'                => \$complement,
     'strict'                      => \$strict,
     'iupac'                       => \$iupac,
     's'                           => \$seq_match,
     'd'                           => \$desc_match,
     'append|a'                           => \$append_info,
	  ) 
  or pod2usage(2);
		  
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
pod2usage("$0: Requires -D, -S, --strict, --iupac, or <search> <replace>. Try $NAME -h for help.") if (!(-t STDIN) && $delete && $squeeze && @ARGV != 2 && $iupac && $strict);
pod2usage("$0: Requires -D, -S, --strict, --iupac, or <search> <replace> <fasta file1 .. fasta fileN>. Try $NAME -h for help.") if ((-t STDIN) && @ARGV == 0);
pod2usage("$0: -D, -S, --strict, and --iupac are mutually exclusive options. Try $NAME -h for help.") if (grep($_, $strict, $iupac, $delete, $squeeze) > 1);
pod2usage("$0: -s and -d are mutually exclusive options. Try $NAME -h for help.") if (grep($_, $seq_match, $desc_match) > 1);

&FAST::log($logname, $DATE, $COMMAND, $comment) if ($log); 

$component = 'desc' if ($desc_match);
$component = 'seq'  if ($seq_match or $strict or $iupac);

if (!$delete and !$squeeze and !$strict and !$iupac){
$search = shift @ARGV;
$replace = shift @ARGV;
}
elsif ($delete) {$search = $delete;}
elsif ($squeeze){$search = $squeeze;} 

my $OUT = FAST::Bio::SeqIO->newFh('-format' => $def_format);
my $IN;
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $def_format, '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $def_format);
    }
}

while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $def_format, '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $def_format);
    }
  }
  if ($IN) { 
    while (my $seq = $IN->next_seq()) {
      my $matchfield = $seq->$component();
      $moltype = $seq->alphabet if (!$moltype);
      my $count;
      my @options = ();
      push @options, 'c' if ($complement or $strict or $iupac);
      push @options, 'd' if ($delete);
      push @options, 's' if ($squeeze);
      my $options = join '',@options;
      if ($strict){$search = $strict_symbols{$moltype}; $replace = $ambig{$moltype};}
      elsif ($iupac){$search = $iupac_symbols{$moltype}; $replace = $ambig{$moltype};}  
      eval "\$count = \$matchfield =~ tr/$search/$replace/$options";
      $seq->$component($matchfield);
      if ($append_info) {
  $seq->desc(join ' ',$seq->desc(),"fastr: $search|$replace|$options:$count");
      }
      print $OUT $seq;
    }
    undef $IN;
  }
}



__END__

=head1 NAME

fastr - facilitates the application of a tr/// operator on all ids,
descriptions or seqeunces on input

=head1 SYNOPSIS

fastr [options] \'PERL-REGEX\' [MULTIFASTA-FILE...]

=head1 DESCRIPTION

fastr takes multifasta format sequence or alignment data as input,
and faciliates the application of a tr/// operator. This faciliates 
character remapping, case changes, deletions, degapping, squeezing of
repeated characters, and more. Various case-spellings are allowed 
such as strict alphabet, iupac alphabet, upper case only and the 
replacement of ambigious characters with a defined character rather 
than 'N' or 'X'. 

Options specific to fastr:
  -D                           Delete
  -S                           Squeeze
  --strict                     Strict DNA or RNA (ACGTacgt)
  --iupac                      Allows sequence ambiguities
  -s                           Match on Sequence
  -d                           Match on description
  -a, --append                 Append information section
  -c, --complement             Delete opposite of indicated

Options general to FAST:
  -h, --help                  	 print a brief help message
  --man             	           print full documentation
  --version                         print version
  -l, --log                         create/append to logfile	
  -L, --logname=<string>            use logfile name <string>
  -C, --comment=<string>            save comment <string> to log
  --format=<format>                 use alternative format for input  
  --moltype=<[dna|rna|protein]>      specify input sequence type

=head1 INPUT AND OUTPUT

fastr is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT. The FAST utility B<fasconvert> can
reformat other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-D>

Delete defined characters or spaces. Default:[match on identifier]

=item B<-S>

Squeezes defined characters or spaces into one character or space.
Default:[match on identifier]

=item B<-s>

This option will match defiined REGEX on the seqeunces.

=item B<-d>

This option will match defined REGEX on description.

=item B<--strict>

This option will replace anything that is not a ACTGU/actgu with N.

=item B<--iupac>

This option will replace any charcter that is not an IUPAC ambiguity
with an N.

=item B<-c>
      B<--complement>

This option will match and act on any character other than the REGEX.

=item B<-a>
      B<--append>

This option will append the description 

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Print all sequences with "-DNA" in the ID:

=over 8

cat data.fas | fasgrep "-DNA" > data.dna.fas

=back


=back

=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Ardell (2013). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
