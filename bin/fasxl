#!/usr/bin/perl -w
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::GapSeq;
use FAST::Bio::SeqIO;
use FAST::Bio::MySeqUtils;
use strict;

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "Translates gapped and ungapped sequences and alignments.";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  # "fasta";
my $def_logname = $FAST::DEF_LOGNAME; # "FAST.log.txt";

my $def_stop_char = '*'; # -s
my $def_unk_char  = 'X'; # -u
my $def_frame     = 0;   # -F
my $def_code      = 1;   # -t // TABLE_ID (CODE)

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h2

my $format               = $def_format;  # -f
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C

my $gapped               = undef;        # -g, gapped one-letter aa IUPAC transation, aligns to codons
my $keep_msg             = undef;        # -k, forces -i
my $xl_as_cds            = undef;        # --cds, force all translations to start with M
my $expand_gaps          = undef;        # -e, expand gaps
my $moltype              = undef;        # -m, force moltype

my $stop_char            = $def_stop_char; # -s
my $unk_char             = $def_unk_char;  # -u
my $frame                = $def_frame;     # -F
my $code                 = $def_code;      # -c

## in increasing priority:
my $all_three            = undef;        # -3
my $all_six              = undef;        # -6

GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\"" 
						    unless $val =~ /dna|rna/i; 
						  $moltype = $val;
						},
           'stop-char|s=s'               => sub{  my (undef,$val) = @_; 
		   				  die "$NAME: --stop-char or -s option takes a single character argument in POSIX class [:print:]." 
						    unless $val =~ /\A[[:print:]]\Z/;
						  $stop_char = $val;
						},
           'unk-char|u=s'                => sub{  my (undef,$val) = @_; 
		   				  die "$NAME: --unk-char or -u option takes a single character argument in POSIX class [:print:]." 
						    unless $val =~ /\A[[:print:]]\Z/;
						  $unk_char = $val;
						},	   
           'frame|f=i'                   => sub{  my (undef,$val) = @_; 
		   				  die "$NAME: --frame or -f option takes an integer argument between 0 and 2 inclusively." 
						    unless $val >= 0 and $val <= 2;
						  $frame = $val;
						},
	   'code|c=i'                    => sub{  my (undef,$val) = @_; 
						  die "$NAME: --code or -c option takes an integer argument, an NCBI genetic code identifer in the set {1..6,9..16,21..23}. See man page." 
						    unless $val >= 1 and $val <= 6 or $val >= 9 and $val <= 16 or $val >= 21 and $val <= 23;
						  $code = $val;
						},
	   'all-three|3'                 => \$all_three,
	   'all-six|6'                   => \$all_six,	   
	   'gapped|g'                    => \$gapped,
	   'keep-msg|k'                  => \$keep_msg,
	   'cds'                         => \$xl_as_cds,
	   'expand-gaps|e'               => \$expand_gaps,
	  )
  or pod2usage(2);
		  
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
#pod2usage("$0: Requires zero arguments when reading from STDIN. Try $NAME -h for help.") if ((-t STDIN) && (@ARGV != 0));

&FAST::log($logname, $DATE, $COMMAND, $comment) if ($log); 

$keep_dna and do {
  $gapped = true;
};

my $OUT = FAST::Bio::SeqIO->newFh('-format' => 'fasta');
my $IN;
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $format, '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $format);
    }
}

while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $format, '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $format);
    }
  }
  if ($IN) { 
    while (my $nseq = $IN->next_seq()) {
      $keep_msg and do {
	print $OUT $nseq;
      };
      if ($all_six) {
	&xl_3_frames($nseq);
	my $rc = $nseq->revcom;
	my $id = join '-',$nseq->display_id,'rc';
	$rc->display_id($id);
	$keep_dna and do {
	  print $OUT $rc;
	};
	&xl_3_frames($rc);
      }
      elsif ($all_three) {
	&xl_3_frames($nseq);
      }
      else {
	&xl ($nseq,$frame);
      }
    }
    undef $IN;
  }
}


#-----------------------
sub xl_3_frames {
#-----------------------
  my $seq = shift;
  for ($frame=0;$frame<3;$frame++) {
    &xl ($seq,$frame);
  }
}

#-----------------------
sub xl {
#-----------------------
  my $seq = shift;
  my $frame = shift;

  my $aa;
  if ($gapped) {
    my $gapseq = FAST::Bio::GapSeq->copy($seq);
    $gapseq->alphabet($seq->alphabet());
    $aa = $gapseq->translate($stop_char,$unk_char,$frame,$code,$xl_as_cds); 
  }
  elsif ($expand_gaps) {
    my @aaseq = ();
    my $seqseq = $seq->seq;
    my @seqparts = split /(-+)/,$seqseq;
    foreach my $part (@seqparts) {
      if ($part =~ /-/) {
	$_ =~ s/---/-/g;
	push @aaseq,$_;
      }
      else {
	my $seq = FAST::Bio::Seq->new(-seq => $part, -alphabet => $seq->alphabet());
	my $as = $seq->translate($stop_char,$unk_char,$frame,$code,undef); ## handle cds 
	push @aaseq, $as->seq;
      }
    }
    my $aaseq = join '',('-' x $frame),@aaseq;
    $aa = FAST::Bio::Seq->new(-seq => $aaseq, -alphabet => $seq->alphabet());
  }
  else {
    if ($seq->seq() =~ /-/) {
      die "$0: expects gap-free input unless -g or -e options are used. Try fasdegap or fastr.";
    }
    $aa = $seq->translate($stop_char,$unk_char,$frame,$code,$xl_as_cds); 
    my $aaFix = join '',('-' x $frame),$aa->seq;
    $aa->seq($aaFix);
  }
  my $id = join '-',$seq->display_id,"xl$frame";   
  $aa->display_id("$id");
  print $OUT $aa;  
}


__END__

=head1 NAME

fasxl - translate sequences by a genetic code.

=head1 SYNOPSIS

fasxl [options] [MULTIFASTA-FILE...]

=head1 DESCRIPTION

fasxl takes multifasta format DNA or RNA codon sequences or alignments
as input, and generates biological translations of those sequences as
output. Gapped sequences on input are allowed. 

Options:
  -s, --match-sequence              match on sequence 
  -d, --match-description           match on description 
  -v, --negate                      output sequences that do not match
  -i, --insensitive                 match case-insensitively
  -e, --iupac-expand-nuc            expand ambiguities for DNA/RNA
  -r, --revcom-iupac-expand-nuc     reverse complement and expand 
  -p, --iupac-expand-prot           expand ambiguities for protein
  -m, --moltype=I<protein|rna|dna>     force moltype of input sequences 
  -h, --help                  	 print a brief help message
  --man             	           print full documentation
  --version                         print version

=head1 INPUT AND OUTPUT

fasgrep is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT. The FAST utility B<fasconvert> can
reformat other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-s>,
      B<--match-sequence> 		

Match on sequence data.
Default: [match on identifier]

=item B<-d>,
      B<--match-description> 		

Match on description. If both -s and -d options are used, -s takes priority.
Default: [match on identifier]

=item B<-v>,
      B<--negate> 	   

Output sequences that B<do not> match the regular expression argument.

=item B<-i>,
      B<--insensitive> 	   

Match data case-insensitively.

=item B<-e>,
      B<--iupac-expand-nuc> 	  

Expand IUPAC ambiguity symbols in the regex argument for DNA/RNA
sequence matching (implies -s, matching on sequence data). For
example, the symbol "B" in the regex is equivalent to "[CGTU]". This
option, -e, has priority over -p.

=item B<-r>,
      B<--revcom-iupac-expand-nuc> 	  

Reverse complement the regular-expression and expand IUPAC ambiguity
symbols for DNA/RNA sequence matching (implies -s, matching on
sequence data). For example, the symbol "B" in the regex is equivalent
to "[ACG]". This option, -r, takes priority over -e or -p.
priority.

=item B<-p>,
      B<--iupac-expand-prot> 	  

Expand IUPAC ambiguity symbols in the regex argyment for protein
sequence matching (implies -s, matching on sequence data).

=item B<-m>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Print all sequences with "-DNA" in the ID:

=over 8

cat data.fas | fasgrep "-DNA" > data.dna.fas

=back

Print all seqs with "mammal", "Mammal" or "MAMMAL" in the description:

=over 8

fasgrep -di "mammal" < data.fas > mammal.fas     

=back

Print all sequences with the motif MSDQ in them:

=over 8

fasgrep -s  "MSDQ"  < data.fas > MSDQ.fas       
    
=back

Print all sequences that don't start with S or R:
    
=over 8

fasgrep -v "^[SR]" < data.fas > sub.fas         

=back

Print all sequences matching purine-purine-pyrimidine:

=over 8

fasgrep -sem dna "RRY"  < data.fas > RRY.fas 
   
fasgrep -se "RRY"  < data.fas > RRY.fas        

fasgrep -s "[AG][AG][CT]" < data.fas > RRY.fas

fasgrep -s "[AG]{2}[CT]" < data.fas > RRY.fas

=back

=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Ardell (2013). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
