#!/usr/bin/perl -w
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use FAST::Bio::AlignIO;
use FAST::Bio::UnivAln;
use FAST::Bio::SimpleAlign;
use FAST::Bio::Location::NarrowestCoordPolicy;
use strict;

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "Extract subalignments based on reg-ex matching on features in an annotated genbank file.\n";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $case                 = undef; #-i
my $negate               = undef; #-n
my $tag_match            = undef; #-t
my $slice_match          = undef; #-s
my $intersect_match      = undef; #-x
my $primary_match        = undef; #-P
my $delete_gap           = undef; #-g
my $gap_intron           = undef; #-r Currently not implemented
my $verbose               = undef; #-v
my $opt_C                = 0; #Currently not implemented


GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,
	   'case-insensitive|i'          => \$case,
	   'negate|n'                    => \$negate,
	   'tag|t=s'                     => \$tag_match,
	   'slice|s=s'                   => \$slice_match,
	   'intersect|x=s'               => \$intersect_match,
	   'primary|P=s'                 => \$primary_match,
	   'gap-delete|g'                => \$delete_gap,
	   'verbose|v'                    => \$verbose,

	  ) 
  or pod2usage(2);
		  
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
pod2usage("$0: Requires three arguments: $NAME [options] alignment-file genbank-file \'perl-reg-exp\'. Try $NAME -h for help.") if ((-t STDIN) && (@ARGV != 3));


&FAST::log($logname, $DATE, $COMMAND, $comment) if ($log); 

my @colslice;   
my @x_colslice;
my $subaln;      
my $rex;
my $value;

my $tag = 'note';
$tag_match and $tag = $tag_match;

## PROCESS ARGUMENTS
my $aln_file_nm = shift @ARGV;
my $gb   = FAST::Bio::SeqIO->new(   -file =>  shift @ARGV , '-format' => 'genbank')->next_seq();
my $aln  = FAST::Bio::UnivAln->new('-file' => $aln_file_nm);
my $saln = FAST::Bio::AlignIO->new( -file =>  $aln_file_nm)->next_aln();
my $rearg = shift @ARGV;
my $re = ($case ? qr/$rearg/i : qr/$rearg/);

die "Genbank sequence ID not found in alignment\n" unless ( $saln->each_seq_with_id($gb->id()) ); 

## PROCESS INTERSECTION RESTRICTION FEATURE ARG IF FOUND
if ($intersect_match) {
  $rearg = $intersect_match;
  $rex = ($case ? qr/$rearg/i : qr/$rearg/);
}

## SET POLICY TO NARROW
my $narrow_policy = FAST::Bio::Location::NarrowestCoordPolicy->new();

## GET COLUMNS MATCHING FEATURE REGEX
foreach my $feat ( $gb->top_SeqFeatures() ) {
  next if ($primary_match and $feat->primary_tag() ne $primary_match);
  $feat->location->coordinate_policy($narrow_policy);
  if ($feat->has_tag($tag)) {
    foreach $value ( $feat->each_tag_value($tag) ) {
      if ((!$negate and $value =~ $re) or ($negate and $value !~ $re)) {
  if ($verbose) {
    print STDERR "Matched ",$feat->primary_tag()," at ",$feat->location->to_FTstring()," with $tag $value.\n";
  }
  if (ref($feat->location) eq 'FAST::Bio::Location::Simple') {
    my $start = $saln->column_from_residue_number($gb->id(),$feat->start);
    my $stop  = $saln->column_from_residue_number($gb->id(),$feat->end);
    push @colslice, ($start < $stop ? ($start-$opt_C)..($stop+$opt_C) : ($stop-$opt_C)..($start+$opt_C)); 
  }
  elsif (ref($feat->location) eq 'FAST::Bio::Location::Split') {
    foreach my $subloc ($feat->location->sub_Location) {
      my $start = $saln->column_from_residue_number($gb->id(),$subloc->start);
      my $stop  = $saln->column_from_residue_number($gb->id(),$subloc->end);
    push @colslice, ($start < $stop ? ($start-$opt_C)..($stop+$opt_C) : ($stop-$opt_C)..($start+$opt_C)); 
    }
  }
      }
      ## GET COLUMNS MATCHING INTERSECTION REGEX IF EXISTS
      if ($intersect_match and $value =~ $rex) {
  if (ref($feat->location) eq 'FAST::Bio::Location::Simple') {
    my $start = $saln->column_from_residue_number($gb->id(),$feat->start);
    my $stop  = $saln->column_from_residue_number($gb->id(),$feat->end);
    push @x_colslice, ($start < $stop ? ($start-$opt_C)..($stop+$opt_C) : ($stop-$opt_C)..($start+$opt_C)); 
  }
  elsif (ref($feat->location) eq 'FAST::Bio::Location::Split') {
    foreach my $subloc ($feat->sub_Location) {
      my $start = $saln->column_from_residue_number($gb->id(),$subloc->start);
      my $stop  = $saln->column_from_residue_number($gb->id(),$subloc->end);
      push @x_colslice, ($start < $stop ? ($start-$opt_C)..($stop+$opt_C) : ($stop-$opt_C)..($start+$opt_C)); 
    }
  }
      }
    }
  }
}

if ($gap_intron) { ## match introns and gap them into alignment
  foreach my $feat ( $gb->top_SeqFeatures() ) {
    next if ($primary_match and $feat->primary_tag() ne $primary_match);
    $feat->location->coordinate_policy($narrow_policy);
    if ($feat->has_tag($tag)) {
      foreach $value ( $feat->each_tag_value($tag) ) {
  if ($value =~ /intron/) {
    if ($verbose) {
      print STDERR "Matched ",$feat->primary_tag()," at ",$feat->location->to_FTstring()," with $tag $value.\n";
    }
    my $start = $saln->column_from_residue_number($gb->id(),$feat->start);
    my $stop  = $saln->column_from_residue_number($gb->id(),$feat->end);
    ##    push @intronslice, ($start < $stop ? ($start)..($stop) : ($stop)..($start)); 
  }
      }
    }
  }
  
  ## MAP INTRON TO GAP
  
}



## SORT AND COMPRESS THE COLUMN LIST
my %seen = ();
my @sc_colslice =  sort {$a <=> $b} grep { ! $seen{$_} ++ } @colslice;

if ($intersect_match) {
  ## SORT AND COMPRESS THE INTERSECTION COL SLICE
  %seen = ();
  my @x_sc_colslice = sort {$a <=> $b} grep { ! $seen{$_} ++ } @x_colslice;
  
  ## FIND THE INTERSECTION OF THE TWO LISTS
  my %union = my %isect = ();
  foreach (@sc_colslice, @x_sc_colslice) { $union{$_}++ && $isect{$_}++ }

  @sc_colslice = keys %isect;
}

## SUBSET AND PRINT ALIGNMENT
## SUBSET SEQUENCES IN ALIGNMENT IF DESIRED
if ($slice_match) {
  my $re = qr/$slice_match/;
  my @seqs = grep /$re/, @{ $aln->row_ids };
  my $seq_names = join ' ',@seqs; 
  $subaln = new FAST::Bio::UnivAln(-seqs=>scalar($aln->seqs({ids => $seq_names},\@sc_colslice)), -row_ids=>\@seqs);
}
else {
  $subaln = new FAST::Bio::UnivAln(-seqs=>scalar($aln->seqs([],\@sc_colslice)), -row_ids=>$aln->row_ids);
}

if ($delete_gap) {
  $subaln = new FAST::Bio::UnivAln(-seqs=>scalar($subaln->no_allgap_sites()), -row_ids=>$subaln->row_ids);
}

$subaln->ffmt($def_format); 
my $layout = $subaln->layout();
## FIX FASTA PRINT BUG (IDs SHOULD GO RIGHT AFTER '>') 
$layout =~ s/^>\s+/>/gm;
print "$layout";

__END__

=head1 NAME

B<gbfalncut> - extract subalignments based on reg-ex matching on features in an annotated genbank file

=head1 SYNOPSIS

B<gbfalncut> [options] \'PERL-REGEX\' [MULTIFASTA-FILE...]

=head1 DESCRIPTION

B<gbfalncut> takes multifasta format sequence or alignment data as input,

Options specific to name:
  B<-i>, B<--case-insensitive>
  B<-n>, B<--negate>
  B<-t>, B<--tag>=<string>
  B<-s>, B<--slice>=<string>
  B<-x>, B<--intersect>=<string>
  B<-P>, B<--primary>=<string>
  B<-g>, B<--gap-delete>
  B<-v>, B<--verbose>

Options general to FAST:
  B<-h>, B<--help>                  	 print a brief help message
  B<--man>             	           print full documentation
  B<--version>                         print version
  B<-l>, B<--log>                         create/append to logfile	
  B<-L>, B<--logname>=<string>            use logfile name <string>
  B<-C>, B<--comment>=<string>            save comment <string> to log
  B<--format>=<format>                 use alternative format for input  
  B<--moltype>=<[dna|rna|protein]>      specify input sequence type

=head1 INPUT AND OUTPUT

B<gbfalncut> is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT. The FAST utility B<fasconvert> can
reformat other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-i>,
      B<--case-insensitive>



=item B<-n>,
      B<--negate>



=item B<-t [string]>,
      B<--tag [string]>



=item B<-s [string]>,
      B<--slice [string]>



=item B<-x [string]>,
      B<--intersect [string]>



=item B<-P [string]>,
      B<--primary [string]>



=item B<-g>,
      B<--gap-delete>



=item B<-v>,
      B<--verbose>



=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Print all sequences with "-DNA" in the ID:

=over 8

cat data.fas | B<fasgrep> "-DNA" > data.dna.fas

=back


=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Lawrence et al. (2014). FAST: FAST Analysis of
Sequences Toolbox.> and Bioperl I<Stajich et al.>. 

=cut
