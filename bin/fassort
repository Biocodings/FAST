#!/Users/travislawrence/perl5/perlbrew/perls/perl-5.18.2/bin/perl -w

## April 23, 2014: DHA completed new implementation of fassort
## uses Mergesort when going over a memory limit

## TODO: test, update documentation

use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use strict;
use Sort::Key qw/ keysort_inplace nkeysort_inplace rkeysort_inplace rnkeysort_inplace / ;
use Devel::Size qw/ total_size /;
use Sort::MergeSort;
use File::Temp qw/ tempfile /;
use Storable qw/ store_fd /; 
use constant { true => 1, false => 0 };

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "Sort sequence records in a multifasta file or data-stream.\n";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";
my $def_delimiter = ":";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $split_on_regex       = undef;        # -S 

## in increasing priority:
my $sort_description    = undef;  # -d
my $sort_sequence       = undef;  # -s
my $sort_field          = undef;  # -f
my $sort_regex          = undef;  # -t

my $reverse             = undef;  # -r
my $numeric             = undef;  # -n

my $memory_limit        = 1048576;  # -M; one-half GB


GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,


	   'sort-description|d'         => \$sort_description,
	   'sort-sequence|s'            => \$sort_sequence,
	   'sort-field|f=i'             => sub{  my (undef,$val) = @_; 
						  die "$NAME: --sort-field or -f option takes a positive integer argument." 
						    unless $val != 0; 
						  $sort_field = $val;
						},
	   'split-on-regex|S=s'          => \$split_on_regex,
	   'sort-regex|t=s'              => \$sort_regex,

	   'reverse|r'                   => \$reverse,
	   'numeric|n'                   => \$numeric,   
	   'memory_limit|M=i'            => \$memory_limit

	  ) 
  or pod2usage(2);
		  
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

if (!(-t STDIN) and (@ARGV != 0)) {
  pod2usage("$0: Requires exactly zero arguments when taking input from STDIN. Try $NAME -h for help."); 
}
elsif ((-t STDIN) and (@ARGV != 1)) {
  pod2usage("$0: Requires exactly one argument unless taking input from STDIN. Try $NAME -h for help.");
}
&FAST::log($logname, $DATE, $COMMAND, $comment) if ($log); 

my $split_re;
if ($split_on_regex) {
  $split_re = qr/$split_on_regex/;
}
else {
  $split_re = ' ';
}

my $index;
if ($sort_field and $sort_field > 0) {
  $index = $sort_field - 1;
}
elsif ($sort_field and $sort_field < 0) { # $match_field < 0
  $index = $sort_field;
}


my $keysort;
if ($numeric){
  if ($reverse) {
    $keysort = sub {my $ar = shift; return rnkeysort_inplace { $_->[0] } @$ar; }
  }
  else {
    $keysort = sub {my $ar = shift; return  nkeysort_inplace { $_->[0] } @$ar; }
  }
}
else {
  if ($reverse) {
    $keysort = sub {my $ar = shift; return  rkeysort_inplace { $_->[0] } @$ar; }
  }
  else {
    $keysort = sub {my $ar = shift; return    keysort_inplace { $_->[0] } @$ar; }
  }
}

my $keyf;
if ($sort_regex) {
  $keyf = sub { my $s = shift; my $re = qr/$sort_regex/; my $d = $s->desc(); $d =~ $re; my $o = $1; $o; };
}
elsif ($sort_field) {
  $keyf = sub { my $s = shift; my @fields = split $split_re,$s->desc(); $fields[$index]};
}
elsif ($sort_description) {
  $keyf = sub { my $s = shift; $s->desc() };
}
elsif ($sort_sequence) {
  $keyf = sub { my $s = shift; $s->seq() };
}
else {
  $keyf = sub { my $s = shift; $s->id() };
}



my $OUT = FAST::Bio::SeqIO->newFh('-format' => 'fasta');
my $IN;
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => 'fasta', '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => 'fasta');
    }
}

my $seqs = [];
my $merge;
my @fnames = ();
while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $format, '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $format);
    }
  }
  if ($IN) { 
    while (my $seq = $IN->next_seq()) {
      my $key = &$keyf($seq);
      push @$seqs, [$key,$seq];
      if (Devel::Size::total_size($seqs) > $memory_limit) {
	$merge = 1;                                     ## PREPARE TO MERGE SORT
	&$keysort(\@$seqs);                              ## SORT DATA IN MEMORY
	my ($fh, $filename) = File::Temp::tempfile();   ## OPEN TEMPFILE 
	push @fnames, $filename;                        ## REMEMBER NAME                 
	store_fd($seqs, $fh)                   ## STORE DATA
	    or die("$NAME: Could not write data to $filename with Storable");                 
	$seqs = [];                                     ## FREE MEMORY
      }
      
    }
    undef $IN;
  }
}

&$keysort(\@$seqs); 

unless ($merge) {
  foreach my $seq (@$seqs) {
    print $OUT $seq->[1];
  }
}
else {
  my $last_iter_coderef = sub { return shift @$seqs };
  my $last_iter = Sort::MergeSort::Iterator->new($last_iter_coderef);
  my @iters = ();
  push @iters,$last_iter;
  while (@fnames) {
    my $fname = shift (@fnames);
    my $arrayref = Storable::retrieve($fname) 
      or die ("$NAME: Could not retrieve data from $fname with Storable");  
    my $iter_coderef = sub { return shift @$arrayref };
    my $iter = Sort::MergeSort::Iterator->new($iter_coderef);
    push @iters, $iter;
  }
  my $comparefunc = &return_compare_function();
  my $iterator = Sort::MergeSort::mergesort($comparefunc, @iters);
  while (<$iterator>) {
    print $OUT $_->[1];
  }
}


sub return_compare_function () {
  if ($numeric){
    if ($reverse) {
      return sub { my($a,$b)=@_; return ($b->[0] <=> $a->[0]); };
    }
    else {
      return sub { my($a,$b)=@_; return ($a->[0] <=> $b->[0]); };
    }
  }
  else {
    if ($reverse) {
      return sub { my($a,$b)=@_; return ($b->[0] cmp $a->[0]); };
    }
    else {
      return sub { my($a,$b)=@_; return ($a->[0] cmp $b->[0]); };
    }
  }
}


__END__

=head1 NAME

fassort - Concatenates IDs of adjacent duplicate sequence records in a
multifasta datastream.

=head1 SYNOPSIS

fassort [options] [MULTIFASTA-FILE]

[MULTIFASTA-DATA-ON-STDIN] | fassort [options]

=head1 DESCRIPTION


Options specific to fasuniq:
 

Options general to FAST:
  -h, --help                  	 print a brief help message
  --man             	           print full documentation
  --version                         print version
  -l, --log                         create/append to logfile	
  -L, --logname=<string>            use logfile name <string>
  -C, --comment=<string>            save comment <string> to log
  --format=<format>                 use alternative format for input  
  --moltype=<[dna|rna|protein]>     specify input sequence type

=head1 INPUT AND OUTPUT

fasuniq is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one file or on STDIN. Output
occurs to STDOUT. The FAST utility B<fasconvert> can reformat other
formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Print all sequences with "-DNA" in the ID:

=over 8

cat data.fas | fasgrep "-DNA" > data.dna.fas

=back


=back

=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Ardell (2013). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
