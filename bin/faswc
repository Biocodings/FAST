#!/usr/bin/perl -w
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use strict;

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "sequence number, lengths, and combined length";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $format               = $def_format;  # --format
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $totals               = undef;        # -t
my $sequences            = undef;        # -s
my $characters           = undef;        # -c 

GetOptions('help|h'         		 => \$help, 
	   'man'            		 => \$man,
	   'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
						  die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
						    unless $val =~ /dna|rna|protein/i; 
						  $moltype = $val;
						},
	   'format=s'                    => \$format,
	   'log|l'                       => \$log,
	   'logname|L=s'                 => \$logname,
	   'comment|C=s'                 => \$comment,
	   'totals|t'                    => \$totals,
	   'sequences|s'                 => \$sequences,
	   'characters|c'                => \$characters,
	  ) 
  or exit(1);
		  
$format = lc ($format);

pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
pod2usage("$NAME: Requires at least one argument FILE [FILE2â€¦FILEN] unless input is from STDIN. Try $NAME -h for help.") if ((-t STDIN) && (@ARGV == 0));

&FAST::log($logname, $DATE, $COMMAND, $comment) if ($log); 


my $OUT = FAST::Bio::SeqIO->newFh(-fh => *STDOUT{IO}, '-format' => 'fasta');
my $IN;
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $format, '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => $format);
    }
}

my $numseqs;
my $numchars;
my $file;
my $numseqsfile;
my $numcharsfile;
while ($IN or @ARGV) {
  if (@ARGV) {
    $file = shift (@ARGV);
    $numseqsfile = $numcharsfile = 0;
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $format, '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => $format);
    }
  }
  else {
    undef $file;
  }
  if ($IN) { 
    while (my $seq = $IN->next_seq()) {
      my $length;
      if ($totals or $sequences) {
	$numseqs++;
	$numseqsfile++;
      }
      if ($totals or $characters) {
	$length = $seq->length();
	$numchars += $length;
	$numcharsfile += $length;
      }
      unless ($totals or $sequences or $characters){
	$length = $seq->length();
	my $olddesc = $seq->desc();
	$seq->desc(join ' ',$olddesc,"length:$length");     
	print $OUT $seq;
      }
    }
    if ($file && ($totals || $sequences || $characters)){
      print join "",
	($totals || $sequences  ? sprintf("%10d", $numseqsfile) : ""),
	  ($totals || $characters ? sprintf("%10d", $numcharsfile) : ""),
	    " $file\n";
    }
    undef $IN;
  }
}

if ($totals or $sequences or $characters){
  print join "",
    ($totals || $sequences  ? sprintf("%10d",$numseqs) : ""),
      ($totals || $characters ? sprintf("%10d",$numchars) : ""),
	" total\n";
}

__END__

=head1 NAME

faswc - tally sequences and compute their lengths

=head1 SYNOPSIS

faswc [OPTION]... [MULTIFASTA-FILE...]

=head1 DESCRIPTION

B<faswc> takes sequence or alignment data on input, computes sequence
lengths, and annotates sequence record descriptions with their lengths
in the format "length:<value>."  All sequence characters get counted,
including gap characters.

If the B<-s>, B<-c>, or B<-t> options are used, B<faswc> instead
outputs tallies of sequences, sequence characters, or both
respectively directly to STDOUT (in analogy to B<wc>). If a list of
files are given as arguments to B<faswc>, tallies are calculated by
file also in total. If input is over STDIN, only totals are output.

Options specific to faswc:
  -t, --totals                      tally sequences and characters
  -s, --sequences                   tally sequences 
  -c, --characters                  tally characters

Options general to FAST:
  -h, --help                  	 print a brief help message
  --man             	           print full documentation
  --version                         print version
  -l, --log                         create/append to logfile	
  -L, --logname=<string>            use logfile name <string>
  -C, --comment=<string>            save comment <string> to log
  --format=<format>                 use alternative format for input  
  --moltype=<[dna|rna|protein]>      specify input sequence type

=head1 INPUT AND OUTPUT

B<faswc> is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT.  

=head1 OPTIONS

=over 8

=item B<-t>, 
      B<--totals>                      

Output numbers of sequences and characters by file and/or in total to
STDOUT.

=item B<-s>, 
      B<--sequences>

Output numbers of sequences by file and/or in total to STDOUT.

=item B<-c>, 
      B<--characters>

Output numbers of sequence characters by file and/or in total to STDOUT.

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "faslen" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Print length of all sequences:

=over 8

faswc sequences.fas > measured.fas

=back

Filtering sequences to have length >= 300:

=over 8

faswc sequences.fas | fasfilter -t length 300.. 

=back

Sorting sequences by length:

=over 8

faswc sequences.fas | fassort -t length

=back

=head1 SEE ALSO

=over 8

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Lawrence et al. (2014). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
