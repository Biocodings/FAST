#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell
use POSIX;
use Getopt::Long qw(:config bundling require_order auto_version);
use Pod::Usage;
use FAST;
use FAST::Bio::SeqIO;
use FAST::Bio::PrimarySeq;
use FAST::Bio::Tools::MySeqStats;
use Carp;
use strict;

use vars qw($VERSION $DESC $NAME $COMMAND $DATE);
$VERSION = $FAST::VERSION; 
$DESC    = "";
$NAME    = $0;
$NAME    =~ s/^.*\///;
$COMMAND = join " ",$NAME,@ARGV;
$DATE = POSIX::strftime("%c",localtime());

use constant { true => 1, false => 0 };

## DEFAULT OPTION VALUES
my $def_format  = $FAST::DEF_FORMAT;  #7/1/13 "fasta";
my $def_logname = $FAST::DEF_LOGNAME; #7/1/13 "FAST.log.txt";

## OPTION VARIABLES
my $man                  = undef;  # --man
my $help                 = undef;  # -h
my $moltype              = undef;  # -m, in case bioperl can't tell
my $log                  = undef;        # -l
my $logname              = $def_logname; # -L
my $comment              = undef;        # -C
my $norm                 = undef; #-n
my $total                = undef; #-t
my $append               = undef; #-a
my $strict               = undef;
my $iupac                = undef;
my $case                 = undef;
my $position             = 1; #default value

my $warned;
my $job_alphabet;
my $alphabet;
my $filter;


GetOptions('help|h'              => \$help, 
     'man'                 => \$man,
     'moltype|m=s'                 => sub{  my (undef,$val) = @_; 
              die "$NAME: --moltype or -m option must be either \"dna\", \"rna\" or \"protein\"" 
                unless $val =~ /dna|rna|protein/i; 
              $moltype = $val;
            },
     'log|l'                       => \$log,
     'logname|L=s'                 => \$logname,
     'comment|C=s'                 => \$comment,
     'norm|n'                      => \$norm,
     'total|t'                     => \$total,
     'append|a'                    => \$append,
     'iupac|i'                     => \$iupac,
     'strict|s'                    => \$strict,
     'ignore|c'                    => \$case,
     'position|p=i'                => \$position,

     )
  or pod2usage(2);
		  
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
pod2usage("$0: Requires at least one argument (a fasta-file). Try $NAME -h for help.") if ((-t STDIN) && (@ARGV < 0));
pod2usage("$0: Expects zero arguments when reading input from STDIN. Try $NAME -h for help.") if (!(-t STDIN) && @ARGV != 0);

&FAST::log($logname, $DATE, $COMMAND, $comment) if ($log); 


my %alpha_hash;
$alpha_hash{'dnastrict'}     = qr/[ACTGactg]/;
$alpha_hash{'dnaiupac'}      = qr/[ACTGactgMRWSYKVHDBXNmrwsykvhdbxn]/;
$alpha_hash{'rnastrict'}     = qr/[ACUGacug]/;
$alpha_hash{'rnaiupac'}      = qr/[ACUGacugMRWSYKVHDBXNmrwsykvhdbxn]/;
$alpha_hash{'proteinstrict'} = qr/[ACDEFGHIKLMNPQRSTVWYacdefghiklmnpqrstvwy]/;
$alpha_hash{'proteiniupac'}  = qr/[ACDEFGHIKLMNPQRSTVWYacdefghiklmnpqrstvwyBZX\.bzx\*]/; 

my $OUT = FAST::Bio::SeqIO->newFh('-format' => 'fasta');
my $IN;
unless (@ARGV) {
    if ($moltype) {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => 'fasta', '-alphabet' => $moltype);
    }
    else {
	$IN = FAST::Bio::SeqIO->new(-fh => *STDIN{IO}, '-format' => 'fasta');
    }
}

while ($IN or @ARGV) {
  if (@ARGV) {
    my $file = shift (@ARGV);
    unless (-e $file) {
      warn "$NAME: Could not find file $file. Skipping.\n";
      next;
    }
    elsif ($moltype) {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => 'fasta', '-alphabet' => $moltype);
    }
    else {
      $IN = FAST::Bio::SeqIO->new(-file => $file, '-format' => 'fasta');
    }
  }
  my $sum= [];
  if ($IN) {   
    while (my $seqobj = $IN->next_seq()) {
      process ($seqobj,$sum);
    }
    $total and do {
      for my $i (0..($position-1)) {
      &print_pos($i,$$sum[$i],'',$filter);
      }
    };
    undef $IN;
  }

  
}

#-----------------------
sub process {
#-----------------------
  (my $seqobj, my $sum) = @_;
  
  if ($moltype){
       $seqobj->alphabet($moltype);
      }

      unless ($warned) {
      $job_alphabet and do {
        if ($seqobj->alphabet ne $job_alphabet) {
        warn "Sequences appear not to be of the same type.\n";
        }
        $warned = 1;
       };
      }
    
    unless ($job_alphabet) {
      $job_alphabet = $seqobj->alphabet;
    }
 
    $filter = qr/./; ## MATCH ANY CHARACTER
    
    $strict and do {
      $alphabet = ($seqobj->alphabet . "strict"); 
      $filter = $alpha_hash{$alphabet};
    };
    
    $iupac and do {
      $alphabet = ($seqobj->alphabet . "iupac"); 
      $filter = $alpha_hash{$alphabet};
    };

  my $primseq;
  if (!$case) {
    $primseq = $seqobj->primary_seq;
  } else {
    $primseq = FAST::Bio::PrimarySeq->new(uc $seqobj->seq);
  }
  ## HERE WE FACTOR THE SEQUENCE INTO CUTS BY POSITION
  my @bits = split //,$primseq->seq;
  my @cuts = ();
  my @primseqs = ();
  if (@bits % $position > 0) {
    carp "Sequence length ", ($#bits+1)," is not an even multiple of the chunk-size $position that you requested...\nProceeding anyway...\n";
  }
  for (my $i = 0; $i < @bits; $i++) {
    push @{ $cuts[($i % $position)] }, $bits[$i];
  }
  for (my $i = 0; $i < $position; $i++) {
    $primseqs[$i] = FAST::Bio::PrimarySeq->new(join '',@{ $cuts[$i] });
  }
  
  my $old_desc;
  my $new_desc;
  my $append_count=0; #count so we don't print faspos more than once

  for my $i (0..$#primseqs) {
    my $primseq = $primseqs[$i]; 
    my $seqstats = FAST::Bio::Tools::MySeqStats->new($primseq);
    my $hash_ref = $seqstats->count_monomers();
    if ($total) {
      foreach my $mono (keys %$hash_ref) {
        $$$sum[$i]{$mono} += $$hash_ref{$mono};
      }
    }
    elsif ($append){  
     $old_desc = $seqobj->desc();
     if ($append_count == 0){#first append need faspos label
     $new_desc .= (join '',"fascomp:",&print_pos($i,$hash_ref,$seqobj->display_id,$filter));
     }
     else{ #additional appends no need for faspos label
      $new_desc .= &print_pos($i,$hash_ref,$seqobj->display_id,$filter);
     } 
     $append_count++;   
    }
    else {
      &print_pos($i,$hash_ref,$seqobj->display_id,$filter);
    }
  }
  if ($append){
    $seqobj->desc($old_desc . $new_desc);
    print $OUT $seqobj;
  }
}

#-----------------------
sub print_pos {
#-----------------------
  my ($pos,$hashref,$id,$filter) = @_;
  my ($normalizer,@keys);

  if ($strict or $iupac) {
    foreach my $key (keys %$hashref) {
      if ($key !~ $filter) {
  warn "Sequence", ($id ? " $id" : '(s)'), " contained excluded character \'$key\'.\n";
      }
    }
    unless ($case) {$filter =~ tr/a-z\\//d;}
    $filter =~ /\[(.+)\]/; ## REGEXP A REGEXP
    my $allowed = $1;
    @keys = split //,$allowed;
  } else {
    @keys = sort keys %$hashref;
  }
  if (!$append){
  print '> ';
  foreach my $key (@keys) {
    printf ("%8s",$key);
  }
  print " TOTAL";
  if ($position == 1) {print " // $id\n  ";}
  else {print " // $id-(POS $pos)\n  ";} ## THE TRAILING SPACES PRIME FOR THE NEXT LINE
  if ($norm) {
    foreach my $key (@keys) {
      $normalizer += (exists $$hashref{$key} ? $$hashref{$key} : 0);
    }
    foreach my $key (@keys) {
      printf "%8.3f", ((exists $$hashref{$key} and $normalizer != 0) ? ($$hashref{$key}/$normalizer) : 0);
    }
  } else {
    foreach my $key (@keys) {
      $normalizer += (exists $$hashref{$key} ? $$hashref{$key} : 0);
      printf "%8d", (exists $$hashref{$key} ? $$hashref{$key} : 0);
    }
      printf "%8d", $normalizer;
  }
  print "\n";
  }
  else { #append true
  my $append_desc;
  #if ($position == 1) {print " // $id\n  ";}
  #else {print " // $id-(POS $pos)\n  ";} ## THE TRAILING SPACES PRIME FOR THE NEXT LINE
  
  if ($norm) {
    foreach my $key (@keys) {
      $normalizer += (exists $$hashref{$key} ? $$hashref{$key} : 0);
    }
    foreach my $key (@keys) {
      if ($position != 1){
      $append_desc .= sprintf ("POS_%d:%s %.3f|",$pos, $key, ((exists $$hashref{$key} and $normalizer != 0) ? ($$hashref{$key}/$normalizer) : 0));
      }
      else{
        $append_desc .= sprintf ("%s %.3f|",$key, ((exists $$hashref{$key} and $normalizer != 0) ? ($$hashref{$key}/$normalizer) : 0));
      }
    }
    return $append_desc;

  } else {
    foreach my $key (@keys) {
      if ($position != 1){
      $append_desc .= sprintf ("POS_%d:%s %.3f|",$pos, $key, (exists $$hashref{$key} ? $$hashref{$key} : 0));
      }
      else {
      $append_desc .= sprintf ("%s %.3f|",$key, (exists $$hashref{$key} ? $$hashref{$key} : 0));
      }
    }
    return $append_desc;
}

###################################
  # if ($norm) { #append and normalize
   #   foreach $key (@keys) {
    #  $normalizer += $$hashref{$key} ? $$hashref{$key} : 0;
     # }
     # foreach $key (@keys) {
     # $append_desc .= sprintf ("%s:%.3f|", $key, ($$hashref{$key} && $normalizer) ? ($$hashref{$key}/$normalizer) : 0);
     # }
     # return $append_desc;
   # }
   # else{ #append abs
   #   foreach $key (@keys) {
   #   $append_desc .= sprintf ("%s:%d|",$key, $$hashref{$key} ? $$hashref{$key} : 0);
   #   }
   #   return $append_desc
   # }
##################################################

  }
}
__END__

=head1 NAME

name - what it does

=head1 SYNOPSIS

name [options] \'PERL-REGEX\' [MULTIFASTA-FILE...]

=head1 DESCRIPTION

name takes multifasta format sequence or alignment data as input,

Options specific to name:

Options general to FAST:
  -h, --help                  	 print a brief help message
  --man             	           print full documentation
  --version                         print version
  -l, --log                         create/append to logfile	
  -L, --logname=<string>            use logfile name <string>
  -C, --comment=<string>            save comment <string> to log
  --format=<format>                 use alternative format for input  
  --moltype=<[dna|rna|protein]>      specify input sequence type

=head1 INPUT AND OUTPUT

name is part of FAST, the FAST Analysis of Sequences Toolbox, based
on Bioperl. Most core FAST utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
STDIN. Output occurs to STDOUT. The FAST utility B<fasconvert> can
reformat other formats to and from multifasta.

=head1 OPTIONS

=over 8

=item B<-h>,
      B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--version>

Print version information and exit.

=item B<-l>,
      B<--log>

Creates, or appends to, a generic FAST logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.

=item B<-L [string]>,
      B<--logname=[string]>

Use [string] as the name of the logfile. Default is "FAST.log.txt".

=item B<-C [string]>,
      B<--comment=[string]>

Include comment [string] in logfile. No comment is saved by default.

=item B<--format=[format]> 		  

Use alternative format for input. See man page for "fasconvert" for
allowed formats. This is for convenience; the FAST tools are designed
to exchange data in Fasta format, and "fasta" is the default format
for this tool.

=item B<-m [dna|rna|protein]>,
      B<--moltype=[dna|rna|protein]> 		  

Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).

=back

=head1 EXAMPLES

Print all sequences with "-DNA" in the ID:

=over 8

cat data.fas | fasgrep "-DNA" > data.dna.fas

=back


=back

=head1 SEE ALSO

=over 8

=item C<man perlre>

=item C<perldoc perlre>

Documentation on perl regular expressions.

=item C<man FAST>

=item C<perldoc FAST>

Introduction and cookbook for FAST

=item L<The FAST Home Page|http://compbio.ucmerced.edu/ardell/FAST>"

=back 

=head1 CITING

If you use FAST, please cite I<Ardell (2013). FAST: FAST Analysis of
Sequences Toolbox. Bioinformatics> and Bioperl I<Stajich et al.>.

=cut
