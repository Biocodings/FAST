.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FASGREP 1"
.TH FASGREP 1 "2014-04-23" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
fasgrep \- print sequences matching a pattern
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
fasgrep [options] \e'PERL\-REGEX\e' [\s-1MULTIFASTA\-FILE\s0...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
fasgrep takes multifasta format sequence or alignment data as input,
and outputs sequence records whose data match a perl regular
expression (regex) argument. By default, sequence identifiers are
queried by the regex. fasgrep takes one argument, a perl regular
expression. Regex arguments may require quoting to protect special
characters from interpretation by the shell.
.PP
Options specific to fasgrep:
  \-s, \-\-match\-sequence              match on sequence 
  \-d, \-\-match\-description           match on description 
  \-f, \-\-match\-field=<int>           match field <int> in description
  \-S, \-\-split\-on\-regex=<regex>      use regex to split description
  \-v, \-\-negate                      output sequences that do not match
  \-i, \-\-insensitive                 match case-insensitively
  \-e, \-\-iupac\-expand\-nuc            expand ambiguities for \s-1DNA/RNA\s0
  \-r, \-\-revcom\-iupac\-expand\-nuc     reverse complement and expand 
  \-p, \-\-iupac\-expand\-prot           expand ambiguities for protein
.PP
Options general to \s-1FAST:\s0
  \-h, \-\-help                  	 print a brief help message
  \-\-man             	           print full documentation
  \-\-version                         print version
  \-l, \-\-log                         create/append to logfile	
  \-L, \-\-logname=<string>            use logfile name <string>
  \-C, \-\-comment=<string>            save comment <string> to log
  \-\-format=<format>                 use alternative format for input  
  \-\-moltype=<[dna|rna|protein]>      specify input sequence type
.SH "INPUT AND OUTPUT"
.IX Header "INPUT AND OUTPUT"
fasgrep is part of \s-1FAST\s0, the \s-1FAST\s0 Analysis of Sequences Toolbox, based
on Bioperl. Most core \s-1FAST\s0 utilities expect input and return output in
multifasta format. Input can occur in one or more files or on
\&\s-1STDIN\s0. Output occurs to \s-1STDOUT\s0. The \s-1FAST\s0 utility \fBfasconvert\fR can
reformat other formats to and from multifasta.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-s\fR, \fB\-\-match\-sequence\fR" 8
.IX Item "-s, --match-sequence"
Query actual sequence data with the regex.
Default: [query identifiers]
.IP "\fB\-d\fR, \fB\-\-match\-description\fR" 8
.IX Item "-d, --match-description"
Query sequence descriptions with regex. If both \-s and \-d options are
used, \-s takes priority.  Default: [query identifiers]
.IP "\fB\-f [int]\fR, \fB\-\-match\-field=[int]\fR" 8
.IX Item "-f [int], --match-field=[int]"
Query a specific field in sequence descriptions with regex. With this
option, the description is split into fields using strings of white
space as field delimiters (the default Perl behavior for splitting
lines of data into fields).
.Sp
This option takes a mandatory integer option argument giving the index
for which field the regex should query. One-based indexing is used, so
the first field after the identifier has index 1. As standard in Perl,
negative indices count backwards from the last field in the
description; field \*(L"\-1\*(R" is the last field, \*(L"\-2\*(R" is the second-to-last
etc.
.Sp
In fasta files, the identifier occurs between the record separator
(\*(L">\*(R") and the first whitespace on the identifier line, and the
description is everything after the first string of white space on the
identifier line. Therefore the identifier is counted as the 0th field,
which is what fasgrep matches by default.
.Sp
This option takes priority over both \-s and \-d.
.IP "\fB\-S [regex]\fR, \fB\-\-split\-on\-regex=[regex]\fR" 8
.IX Item "-S [regex], --split-on-regex=[regex]"
Use regex <regex> to split the description for the \-f option instead
of the perl default (which splits on one or more whitespace
characters). Special characters must be quoted to protect them from
the shell.
.IP "\fB\-v\fR, \fB\-\-negate\fR" 8
.IX Item "-v, --negate"
Output sequences that \fBdo not\fR match the regular expression argument.
.IP "\fB\-i\fR, \fB\-\-insensitive\fR" 8
.IX Item "-i, --insensitive"
Match data case-insensitively.
.IP "\fB\-e\fR, \fB\-\-iupac\-expand\-nuc\fR" 8
.IX Item "-e, --iupac-expand-nuc"
Expand \s-1IUPAC\s0 ambiguity symbols in the regex argument for \s-1DNA/RNA\s0
sequence matching (implies \-s, matching on sequence data). For
example, the symbol \*(L"B\*(R" in the regex is equivalent to \*(L"[\s-1CGTU\s0]\*(R". This
option, \-e, has priority over \-p.
.IP "\fB\-r\fR, \fB\-\-revcom\-iupac\-expand\-nuc\fR" 8
.IX Item "-r, --revcom-iupac-expand-nuc"
Reverse complement the regular-expression and expand \s-1IUPAC\s0 ambiguity
symbols for \s-1DNA/RNA\s0 sequence matching (implies \-s, matching on
sequence data). For example, the symbol \*(L"B\*(R" in the regex is equivalent
to \*(L"[\s-1ACG\s0]\*(R". This option, \-r, takes priority over \-e or \-p.
priority.
.IP "\fB\-p\fR, \fB\-\-iupac\-expand\-prot\fR" 8
.IX Item "-p, --iupac-expand-prot"
Expand \s-1IUPAC\s0 ambiguity symbols in the regex argyment for protein
sequence matching (implies \-s, matching on sequence data).
.IP "\fB\-m [dna|rna|protein]\fR, \fB\-\-moltype=[dna|rna|protein]\fR" 8
.IX Item "-m [dna|rna|protein], --moltype=[dna|rna|protein]"
Specify the type of sequence on input (should not be needed in most
cases, but sometimes Bioperl cannot guess and complains when
processing data).
.IP "\fB\-h\fR, \fB\-\-help\fR" 8
.IX Item "-h, --help"
Print a brief help message and exit.
.IP "\fB\-\-man\fR" 8
.IX Item "--man"
Print the manual page and exit.
.IP "\fB\-\-version\fR" 8
.IX Item "--version"
Print version information and exit.
.IP "\fB\-l\fR, \fB\-\-log\fR" 8
.IX Item "-l, --log"
Creates, or appends to, a generic \s-1FAST\s0 logfile in the current working
directory. The logfile records date/time of execution, full command
with options and arguments, and an optional comment.
.IP "\fB\-L [string]\fR, \fB\-\-logname=[string]\fR" 8
.IX Item "-L [string], --logname=[string]"
Use [string] as the name of the logfile. Default is \*(L"\s-1FAST\s0.log.txt\*(R".
.IP "\fB\-C [string]\fR, \fB\-\-comment=[string]\fR" 8
.IX Item "-C [string], --comment=[string]"
Include comment [string] in logfile. No comment is saved by default.
.IP "\fB\-\-format=[format]\fR" 8
.IX Item "--format=[format]"
Use alternative format for input. See man page for \*(L"fasconvert\*(R" for
allowed formats. This is for convenience; the \s-1FAST\s0 tools are designed
to exchange data in Fasta format, and \*(L"fasta\*(R" is the default format
for this tool.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Print all sequences with \*(L"\-DNA\*(R" in the \s-1ID:\s0
.Sp
.RS 8
cat data.fas | fasgrep \*(L"\-DNA\*(R" > data.dna.fas
.RE
.PP
Print all seqs with \*(L"mammal\*(R", \*(L"Mammal\*(R" or \*(L"\s-1MAMMAL\s0\*(R" in the description:
.Sp
.RS 8
fasgrep \-di \*(L"mammal\*(R" < data.fas > mammal.fas
.RE
.PP
Print all sequences with the motif \s-1MSDQ\s0 in them:
.Sp
.RS 8
fasgrep \-s  \*(L"\s-1MSDQ\s0\*(R"  < data.fas > \s-1MSDQ\s0.fas
.RE
.PP
Print all sequences that don't start with S or R:
.Sp
.RS 8
fasgrep \-v \*(L"^[\s-1SR\s0]\*(R" < data.fas > sub.fas
.RE
.PP
Print all sequences matching purine-purine-pyrimidine:
.Sp
.RS 8
fasgrep \-sem dna \*(L"\s-1RRY\s0\*(R"  < data.fas > \s-1RRY\s0.fas
.Sp
fasgrep \-se \*(L"\s-1RRY\s0\*(R"  < data.fas > \s-1RRY\s0.fas
.Sp
fasgrep \-s \*(L"[\s-1AG\s0][\s-1AG\s0][\s-1CT\s0]\*(R" < data.fas > \s-1RRY\s0.fas
.Sp
fasgrep \-s \*(L"[\s-1AG\s0]{2}[\s-1CT\s0]\*(R" < data.fas > \s-1RRY\s0.fas
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.ie n .IP """man perlre""" 8
.el .IP "\f(CWman perlre\fR" 8
.IX Item "man perlre"
.PD 0
.ie n .IP """perldoc perlre""" 8
.el .IP "\f(CWperldoc perlre\fR" 8
.IX Item "perldoc perlre"
.PD
Documentation on perl regular expressions.
.ie n .IP """man FAST""" 8
.el .IP "\f(CWman FAST\fR" 8
.IX Item "man FAST"
.PD 0
.ie n .IP """perldoc FAST""" 8
.el .IP "\f(CWperldoc FAST\fR" 8
.IX Item "perldoc FAST"
.PD
Introduction and cookbook for \s-1FAST\s0
.IP "The \s-1FAST\s0 Home Page <http://compbio.ucmerced.edu/ardell/FAST>""" 8
.IX Item "The FAST Home Page <http://compbio.ucmerced.edu/ardell/FAST>"""
.SH "CITING"
.IX Header "CITING"
If you use \s-1FAST\s0, please cite \fIArdell (2013). \s-1FAST:\s0 \s-1FAST\s0 Analysis of
Sequences Toolbox. Bioinformatics\fR and Bioperl \fIStajich et al.\fR.
